// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChatRoom = `-- name: CreateChatRoom :exec
/*
Chat Room
*/

INSERT INTO chat_room(
chat_room_id,
chat_room_name 
) values (
	$1, $2
)
returning chat_room_id, chat_room_name
`

type CreateChatRoomParams struct {
	ChatRoomID   uuid.UUID
	ChatRoomName int32
}

func (q *Queries) CreateChatRoom(ctx context.Context, arg CreateChatRoomParams) error {
	_, err := q.db.ExecContext(ctx, createChatRoom, arg.ChatRoomID, arg.ChatRoomName)
	return err
}

const createMessage = `-- name: CreateMessage :exec
/*
 Messages
*/
INSERT INTO message(
message_id,
fk_participants_id,
fk_chat_room_id,
content,
like_message
) VALUES(
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING message_id, content, like_message ,created_at, fk_chat_room_id, fk_participants_id
`

type CreateMessageParams struct {
	MessageID        uuid.UUID
	FkParticipantsID uuid.UUID
	FkChatRoomID     uuid.UUID
	Content          string
	LikeMessage      int32
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.ExecContext(ctx, createMessage,
		arg.MessageID,
		arg.FkParticipantsID,
		arg.FkChatRoomID,
		arg.Content,
		arg.LikeMessage,
	)
	return err
}

const createParticipants = `-- name: CreateParticipants :exec
/*
    Participants
*/
INSERT INTO participants(
participants_id,
name,
chat_room_id
) VALUES (
$1,
$2,
$3
) RETURNING participants_id, name, chat_room_id
`

type CreateParticipantsParams struct {
	ParticipantsID uuid.UUID
	Name           string
	ChatRoomID     uuid.UUID
}

func (q *Queries) CreateParticipants(ctx context.Context, arg CreateParticipantsParams) error {
	_, err := q.db.ExecContext(ctx, createParticipants, arg.ParticipantsID, arg.Name, arg.ChatRoomID)
	return err
}

const deleteChatRoom = `-- name: DeleteChatRoom :one
DELETE FROM chat_room
WHERE chat_room_id = $1
AND NOT EXISTS (
    SELECT 1 FROM message WHERE message.fk_chat_room_id = chat_room.chat_room_id
)
RETURNING chat_room_id, chat_room_name
`

func (q *Queries) DeleteChatRoom(ctx context.Context, chatRoomID uuid.UUID) (ChatRoom, error) {
	row := q.db.QueryRowContext(ctx, deleteChatRoom, chatRoomID)
	var i ChatRoom
	err := row.Scan(&i.ChatRoomID, &i.ChatRoomName)
	return i, err
}

const deleteLike = `-- name: DeleteLike :one
UPDATE message
SET like_message = like_message - 1
WHERE message_id = $1
AND like_message > 0
RETURNING message_id, content, like_message ,created_at, fk_chat_room_id, fk_participants_id
`

type DeleteLikeRow struct {
	MessageID        uuid.UUID
	Content          string
	LikeMessage      int32
	CreatedAt        time.Time
	FkChatRoomID     uuid.UUID
	FkParticipantsID uuid.UUID
}

func (q *Queries) DeleteLike(ctx context.Context, messageID uuid.UUID) (DeleteLikeRow, error) {
	row := q.db.QueryRowContext(ctx, deleteLike, messageID)
	var i DeleteLikeRow
	err := row.Scan(
		&i.MessageID,
		&i.Content,
		&i.LikeMessage,
		&i.CreatedAt,
		&i.FkChatRoomID,
		&i.FkParticipantsID,
	)
	return i, err
}

const patchLikeMessage = `-- name: PatchLikeMessage :one
UPDATE message
    set like_message = $2
WHERE message_id = $1
RETURNING message_id, content, like_message ,created_at, fk_chat_room_id, fk_participants_id
`

type PatchLikeMessageParams struct {
	MessageID   uuid.UUID
	LikeMessage int32
}

type PatchLikeMessageRow struct {
	MessageID        uuid.UUID
	Content          string
	LikeMessage      int32
	CreatedAt        time.Time
	FkChatRoomID     uuid.UUID
	FkParticipantsID uuid.UUID
}

func (q *Queries) PatchLikeMessage(ctx context.Context, arg PatchLikeMessageParams) (PatchLikeMessageRow, error) {
	row := q.db.QueryRowContext(ctx, patchLikeMessage, arg.MessageID, arg.LikeMessage)
	var i PatchLikeMessageRow
	err := row.Scan(
		&i.MessageID,
		&i.Content,
		&i.LikeMessage,
		&i.CreatedAt,
		&i.FkChatRoomID,
		&i.FkParticipantsID,
	)
	return i, err
}
